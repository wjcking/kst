

//Class :Accessory ClassParent
//Begin
//  Accessory:
//		Content
//End
     
//ClassItems
//  Accessory
//  Static
//  Name  
//  ParentName

//ClassTemplate
//Accessory Name : ParentName
//Begin
//	FunctionTemplate
//End  
    //Random rd = new Random();
    //int r = rd.Next(13, 132);
    //int g = rd.Next(134, 224);
    //int b = rd.Next(55, 90);
     
    public int reck(int size = 16)
    {
        if (size <= 1)
        {
            return 1;
        }
        if (size * 2 == 2)
        {
            return 1;
        }
        else if (size * 2 == 4)
        {
            return 2;
        }
        else
        {
            return reck((size - 1)) + reck(size - 2);
        }
    }
		/*
 * 分辨率 2880 1080 175% 字体倍数 测试 A 正 包括回车换行
 *  中文 最多 行 98 列 148
 *  英文 最多 行 136 列 148 
 * 
 */
class karact
{
    string[,] karact_screen1;//= new string[255, 255];
    string[,] karact_screen2;//= new string[255, 255];
    string[,] karact_screen3;//= new string[255, 255];
    string[,] karact_screen4;//= new string[255, 255];
}



/* 只从上往下 下不上
*  C struct
*  C++ 
* 上下都可以 
*  C#
* Java
* Script a();
* function b() { alert("b") }
* function a() {  b();  } 

*interface I { }
*interface P:I{ }
*interface N:P,I{ }
*//中间类 
*static class Sim{ };
*class Amid{ };
*//end
*class A{ }
*class B:A { }
*class C:A { }
*//不能派生类
*struct S:A {};
*struct Q { }; 
*/


    public bool boe { get; set; }             // 布尔值 True 或 False False
    public byte bit { get; set; }                 //8 位无符号整数	0 到 255	0
    public char ket { get; set; }               //16 位 Unicode 字符 U +0000 到 U +ffff	'\0'
    public decimal dec { get; set; }     // 1   28 位精确的十进制值，28-29 有效位数(-7.9 x 1028 到 7.9 x 1028) / 100 到 28	0.0M
    public double dob { get; set; }   //64 位双精度浮点型(+/-)5.0 x 10-324 到(+/-)1.7 x 10308	0.0D
    public float fot { get; set; }            //32 位单精度浮点型	-3.4 x 1038 到 + 3.4 x 1038	0.0F
    public int nod { get; set; }                //	32 位有符号整数类型	-2,147,483,648 到 2,147,483,647	0
    public long lob { get; set; }           //64 位有符号整数类型	-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807	0L
    public sbyte sbt { get; set; }           //8 位有符号整数类型	-128 到 127	0
    public short nst { get; set; }         //16 位有符号整数类型	-32,768 到 32,767	0
    public uint und { get; set; }             //32 位无符号整数类型	0 到 4,294,967,295	0
    public ulong uob { get; set; }      //64 位无符号整数类型	0 到 18,446,744,073,709,551,615	0
    public ushort ust { get; set; }         //16 位无符号整数类型	0 到 65,535	0
	********************

***********************************************
/// <summary>
/// 1.分析问题 
/// 2.效率
/// 3.Metrix~Mytrik
/// 4.来萨克 德米切利 迪米特里 Dimitry Dmtry
/// 5.凯美瑞 莱昂 Komet compile
/// 
///1. struct在栈里面，class在堆里面。
///2. struct不支持继承。
///3. struct 不能有参数为空的构造函数,如果提供了构造函数，必须把所有的变量全都初始化一遍
///4. 不能直接初始化变量。
///5. struct是值类型，class是引用类型，这是最本质区别。
///6. struct轻量级，class重量级。
///7. 当涉及数组操作时，struct效率高，涉及collection操作时，class效率高
/// </summary>
struct DineNew
{    //ding extrame
    //readonly
    //const
    public static int mydix = 0;
    //New^ding(多个好似 复制多个）
    public int Eidix;

    public DineNew(String s)
    {
        Eidix = 1;  //eidix
    }
    public void PrintN()
    {
        Console.Write(string.Format("New{0} My:{1}", Eidix++, mydix++));
    }
    /**************************************/
    //Ding~new(new inside 好似包起来)
    public static int Eydix = 0;
    public static void Pirnt() { Console.Write(String.Format("Ding{0} My:{1}", Eydix++, mydix++)); }


}

/*
* 浅显分析数据存放多一些
*/
struct New
{
    public int Eidix;
    public New(String s)
    {
        Eidix = 1;
        //eidix
    }
    public void PrintN()
    {
        Console.Write(string.Format("New{0}", Eidix++));
    }
}
/*
 * 直接执行算法多
 */
struct Ding
{
    public static readonly object O = "o";
    public static void Pirnt() { Console.Write(String.Format("Ding", "")); }
}

//+, -, !, ~, ++, --	这些一元运算符只有一个操作数，且可以被重载。
//+, -, *, /, %	这些二元运算符带有两个操作数，且可以被重载。
//==, !=, <, >, <=, >=	这些比较运算符可以被重载。
//&&, ||	不:这些条件逻辑运算符不能被直接重载。
//+=, -=, *=, /=, %=不:	这些赋值运算符不能被重载。
//=, ., ?:, ->, new, is, sizeof, typeof不:	这些运算符不能被重载。

————dingnew----------
cypers

/public Cyper(bool value) { Bool = value; }
        //public Cyper(byte value) { }
        //public Cyper(char vaue) { }
        //public Cyper(decimal vaue) { }
        //public Cyper(double value) { }
        //public Cyper(float value) { }
        //public Cyper(int value) { }
        //public Cyper(long value) { }
        //public Cyper(sbyte value) { }
        //public Cyper(short vaue) { }
        //public Cyper(uint value) { }
        //public Cyper(ulong value) { }
        //public Cyper(ushort value) { }
//    ['split', 'slice', 'indexOf', 'lastIndexOf',  'fromCharCode', 'replace', 'charAt', 'toUpperCase', 'toLowerCase', 'concat', 'length'],
//    ['disrepeat', 'sum', 'firstUpper']
//      sot~sod~soc~sok
//      cot~cok~Kot 
//      sob~bos~osb
//      bot~bod~boc~bok
//Covid.Renliy.Hardsoft  
//Create(Add, New, Insert)
//Delete(Display~Kontrol?.Refresh~O~Kovered.? Maynot.Remove)
//Retrieve:Get
//Colid.Hard(Memory
//Modify:Set
//Search:Input
//  Kontrol(Keyboard~Mouse~RenlyHand.Microphone)Retrieve-O-Search
//  Retrieve-O-Search(Keyboard~Mouse~RenlyHand.Microphone)Controlled 
//Enter-O-tain
// Display
//  Change.Control.
//  Update.Time
//  Aipset.? Snic
//  Aupsack.? Snical
// System.U

